<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.youzan.trade.timeout.dal.dao.DelayTaskDAO">

  <resultMap id="BaseResultMap" type="com.youzan.trade.timeout.dal.dataobject.DelayTaskDO">
    <result column="id" property="id" />
    <result column="biz_type" property="bizType" />
    <result column="biz_id" property="bizId" />
    <result column="biz_state" property="bizState" />
    <result column="biz_shard_key" property="bizShardKey" />
    <result column="status" property="status" />
    <result column="close_reason" property="closeReason" />
    <result column="delay_start_time" property="delayStartTime" />
    <result column="delay_end_time" property="delayEndTime" />
    <result column="suspend_time" property="suspendTime" />
    <result column="delay_times" property="delayTimes" />
    <result column="msg_status" property="msgStatus" />
    <result column="msg_end_time" property="msgEndTime" />
    <result column="create_time" property="createTime" />
    <result column="update_time" property="updateTime" />
  </resultMap>

  <sql id="tableName">
    delay_task
  </sql>

  <sql id="Base_Column_List">
    id, biz_type, biz_id, biz_state, biz_shard_key, status, close_reason,
    delay_start_time, delay_end_time, delay_times,msg_status,msg_end_time,
    create_time, update_time ,suspend_time
  </sql>

  <sql id="Insert_Column_List">
    biz_type, biz_id, biz_state, biz_shard_key, status, close_reason,
    delay_start_time, delay_end_time, delay_times,msg_status,msg_end_time,
    create_time, update_time
  </sql>

  <insert id="insert">
    INSERT INTO <include refid="tableName"/>
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Column_List"/>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{bizType},#{bizId},#{bizState},#{bizShardKey},#{status},#{closeReason},
      #{delayStartTime},#{delayEndTime},#{delayTimes},#{msgStatus},#{msgEndTime},
      #{createTime},#{createTime}
    </trim>
  </insert>

  <select id="selectListByBizTypeAndBizId" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM <include refid="tableName" />
    WHERE biz_type = #{bizType} AND biz_id = #{bizId}
  </select>

  <select id="selectListWithBizTypeAndTimeout" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM <include refid="tableName" />
    WHERE biz_type = #{bizType} AND status = #{status} AND delay_end_time &lt; #{timePoint}
    LIMIT #{maxSize}
  </select>

  <select id="selectListWithBizTypeAndMsgTimeout" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM <include refid="tableName" />
    WHERE biz_type = #{bizType} AND status = #{status} AND msg_status = #{msgStatus} AND msg_end_time &lt; #{timePoint}
    LIMIT #{maxSize}
  </select>

  <select id="selectDelayTimesById" resultType="java.lang.Integer">
    SELECT delay_times
    FROM <include refid="tableName" />
    WHERE id = #{taskId}
  </select>

  <update id="close">
    UPDATE <include refid="tableName" />
    <set>
      status = #{statusTo},
      close_reason = #{closeReason},
      delay_times = delay_times + 1,
      update_time = #{updateTime}
    </set>
    WHERE id = #{id} AND status = #{statusFrom}
  </update>

  <update id="updateOnRetry">
    UPDATE <include refid="tableName" />
    <set>
      delay_end_time = date_add(delay_end_time, interval #{delayTimeIncrement} second),
      delay_times = delay_times + 1,
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND status = #{status}
  </update>

  <update id="closeMsg">
    UPDATE <include refid="tableName" />
    <set>
      msg_status = #{msgStatus},
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND msg_status = 10
  </update>

  <update id="updateMsgOnRetry">
    UPDATE <include refid="tableName" />
    <set>
      msg_end_time = date_add(msg_end_time, interval #{delayTimeIncrement} second),
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND msg_status = 10
  </update>

  <update id="updateSuspendTime">
    UPDATE
    <include refid="tableName"/>
    <set>
      status = #{statusTo},
      suspend_time = #{suspendTime},
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND status = #{statusFrom}
  </update>

  <update id="updateStatusAndEndTime">
    UPDATE
    <include refid="tableName"/>
    <set>
      status = #{status},
      delay_end_time = #{delayEndTime},
      <if test="msgEndTime != null">msg_end_time = #{msgEndTime},</if>
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId}
  </update>

  <update id="closeTaskAhead">
    UPDATE <include refid="tableName" />
    <set>
      status = #{statusTo},
      close_reason = #{closeReason},
      update_time = #{updateTime}
    </set>
    WHERE biz_type = #{bizType} AND biz_id = #{bizId} AND status = #{statusFrom}
  </update>

  <update id="updateDelayEndTime">
    UPDATE <include refid="tableName" />
    <set>
      delay_end_time = date_add(delay_end_time, interval #{delayTimeIncrement} second),
      msg_end_time = date_add(msg_end_time,interval #{delayTimeIncrement} second),
      update_time = #{updateTime}
    </set>
    WHERE biz_type = #{bizType} AND biz_id = #{bizId} AND status = #{status}
  </update>

  <!-- 任务的锁定, 强制锁定, 解锁 -->
  <update id="tryLockByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      lock_status = 1,
      update_time = #{currentTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND delay_end_time &lt; #{currentTime}
    AND lock_status = 0
  </update>

  <update id="forceLockByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      lock_status = 1,
      update_time = #{currentTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND delay_end_time &lt; #{currentTime}
    AND date_add(update_time, interval #{internalMinutes} minute) &lt; #{currentTime}
  </update>

  <update id="unlockByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      lock_status = 0,
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND lock_status = 1
  </update>
  <!-- 任务的锁定, 强制锁定, 解锁 -->

  <!-- 消息任务的锁定, 强制锁定, 解锁 -->
  <update id="tryLockMsgByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      msg_lock_status = 1,
      update_time = #{currentTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND msg_status = 10 AND msg_end_time &lt; #{currentTime}
    AND msg_lock_status = 0
  </update>

  <update id="forceLockMsgByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      msg_lock_status = 1,
      update_time = #{currentTime}
    </set>
    WHERE id = #{taskId} AND status = #{status} AND msg_status = 10 AND msg_end_time &lt; #{currentTime}
    AND date_add(update_time, interval #{internalMinutes} minute) &lt; #{currentTime}
  </update>

  <update id="unlockMsgByTaskId">
    UPDATE <include refid="tableName" />
    <set>
      msg_lock_status = 0,
      update_time = #{updateTime}
    </set>
    WHERE id = #{taskId} AND msg_lock_status = 1
  </update>
  <!-- 消息任务的锁定, 强制锁定, 解锁 -->

</mapper>
